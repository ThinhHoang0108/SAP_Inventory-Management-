// For Library Version: 1.130.6

declare namespace sap {
  namespace sac {
    /**
     * Dragonfly Library. Provides models and control to access Multidimensional Data via InA protocol and Firefly
     * library
     *
     * @experimental
     */
    namespace df {
      namespace changeHandler {
        /**
         * Describes the settings that can be provided to the MultiDimModelChangeHandler constructor.
         *
         * @experimental (since 1.120)
         */
        interface $MultiDimModelChangeHandlerSettings
          extends sap.ui.mdc.$ControlSettings {}

        /**
         * Control to handle changes of {@link sap.sac.df.model.MultiDimModel }. To store the changes in {@link sap.ui.fl.variants.VariantManagement }
         * you need to include this change handler control as a dependent somewhere in the view tree for which the
         * variant management is responsible. Each time new data is fetched and the event `dataLoaded` is fired
         * a new change will be created. The method `dataLoaded` needs to be called once to register the {@link sap.sac.df.model.MultiDimModel }
         * to the change handler.
         *
         * @since 1.120
         * @experimental (since 1.120)
         */
        class MultiDimModelChangeHandler extends sap.ui.mdc.Control {
          /**
           * Constructor for a new `MultiDimModelChangeHandler`.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string
          );

          /**
           * Creates a new subclass of class sap.sac.df.changeHandler.MultiDimModelChangeHandler with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.mdc.Control.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<
              T,
              sap.sac.df.changeHandler.MultiDimModelChangeHandler
            >,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.changeHandler.MultiDimModelChangeHandler.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Register {@link sap.sac.df.model.MultiDimModel} for handling changes
           */
          registerMultiDimModel(
            oMultiDimModel: sap.sac.df.model.MultiDimModel
          ): void;
          /**
           * Skip the triggering of the event `apply` once
           */
          skipApplyModelChangeOnce(): void;
        }
      }

      namespace model {
        /**
         * Parameters of the DataProvider#dataUpdated event.
         */
        interface DataProvider$DataUpdatedEventParameters {}

        /**
         * Parameters of the DataProvider#visualizationAdded event.
         */
        interface DataProvider$VisualizationAddedEventParameters {}

        /**
         * Parameters of the DataProvider#visualizationRemoved event.
         */
        interface DataProvider$VisualizationRemovedEventParameters {}

        /**
         * Parameters of the MultiDimModel#dataLoaded event.
         */
        interface MultiDimModel$DataLoadedEventParameters {}

        /**
         * Parameters of the MultiDimModel#dataProviderAdded event.
         */
        interface MultiDimModel$DataProviderAddedEventParameters {}

        /**
         * Parameters of the MultiDimModel#dataProviderRemoved event.
         */
        interface MultiDimModel$DataProviderRemovedEventParameters {}

        /**
         * Parameters of the MultiDimModel#dataProviderUpdated event.
         */
        interface MultiDimModel$DataProviderUpdatedEventParameters {}

        /**
         * Parameters of the MultiDimModel#loaded event.
         */
        interface MultiDimModel$LoadedEventParameters {}

        /**
         * Parameters of the MultiDimModel#variableGroupsAdded event.
         */
        interface MultiDimModel$VariableGroupsAddedEventParameters {}

        /**
         * Axis Layout showing which dimensions are set on rows and which on columns.
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "Rows": [],
         * "Columns": []
         * ```
         *
         *
         * @since 1.119
         * @experimental (since 1.119)
         */
        class AxesLayout extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          /**
           * Creates a new subclass of class sap.sac.df.model.AxesLayout with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.AxesLayout>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.AxesLayout.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Distribute the dimension among the rows and columns
           *
           *
           * @returns resolving to the axes layout object to allow chaining
           */
          setAxesLayout(
            /**
             * an array containing the names of the dimensions on rows. The order in the array control the position
             * on the axis.
             */
            aDimensionOnRowsAxis: string[],
            /**
             * an array containing a containing the names of the dimensions on columns. The order in the array control
             * the position on the axis.
             */
            aDimensionOnColumnsAxis: string[]
          ): sap.sac.df.model.AxesLayout;
        }
        /**
         * A data provider is an analytical query exposed via an analytical engine and accessed via InA protocol.
         * It represents a navigable query manager and allows to access and change data. Instances of this class
         * should only be created by the {@link sap.sac.df.model.MultiDimModel}.
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "Name": "",
         * "DataSourceInfo": { },
         * "Variables": { }
         * "Dimensions": { },
         * "Measures": [ ],
         * "AxesLayout": {
         *   "Columns": [],
         *   "Rows": []
         *  },
         * "Grid": { },
         * "Messages": [ ]
         * "AutoFetchEnabled": ""
         * ```
         *
         *
         * @since 1.119
         * @experimental (since 1.119)
         */
        class DataProvider extends sap.ui.model.json.JSONModel {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();
          /**
           * Indicator if the result set should be fetched automatically. The default value is true.
           */
          AutoFetchEnabled: boolean;

          /**
           * AxesLayout
           */
          AxesLayout: sap.sac.df.model.AxesLayout;

          /**
           * DataSourceInfo
           */
          DataSourceInfo: sap.sac.df.model.DataSourceInfo;

          /**
           * Dimensions
           */
          Dimensions: Record<string, sap.sac.df.model.Dimension>;

          /**
           * Grid
           */
          Grid: sap.sac.df.model.Grid;

          /**
           * Measures
           */
          Measures: Record<string, /* was: sap.sac.df.model.Measure */ any>;

          /**
           * Variables
           */
          Variables: Record<string, sap.sac.df.model.Variable>;

          /**
           * Visualizations
           */
          Visualizations: Record<string, sap.sac.df.model.Visualization>;

          /**
           * Creates a new subclass of class sap.sac.df.model.DataProvider with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.json.JSONModel.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.DataProvider>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.DataProvider.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Data source information.
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         *  "QueryTitle": "",
         *  "QueryName": "",
         *  "QueryType": "",
         *  "SystemName": "",
         *  "CreatedBy": "",
         *  "CreatedOn": "",
         *  "QueryDueDateText": "",
         *  "CreatedOnText": "",
         *  "QueryDueDate": "",
         *  "ResultAlignmentRows": "",
         *  "ResultAlignmentColumns": "",
         *  "LastUpdated": "",
         *  "LastUpdatedBy": "",
         *  "LastUpdatedText": ""
         * ```
         *
         *
         * @since 1.119
         * @experimental (since 1.119)
         */
        class DataSourceInfo extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          /**
           * Creates a new subclass of class sap.sac.df.model.DataSourceInfo with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.DataSourceInfo>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.DataSourceInfo.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Dimension Object
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "Name": "",
         * "TechName": "",
         * "Description": "",
         * "Axis": "",
         * "Type": "",
         * "HierarchyActive": "",
         * "HasFilter": "",
         * "MemberFilter": [],
         * "SortDirection": "",
         * "Position": "",
         * "LastPosition": "",
         * "IsStructure": "",
         * "IsMeasureStructure": "",
         * "ValueType": "",
         * "SemanticObject": "",
         * "Members": [{
         *   "Key": "",
         *   "Name": "",
         *   "TechName": "",
         *   "Description": "",
         *   "SemanticObject": "
         * }],
         * "SupportedOperators": ["EQ"]
         * ```
         *
         *
         * @since 1.119
         * @experimental (since 1.119)
         */
        class Dimension extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          /**
           * Creates a new subclass of class sap.sac.df.model.Dimension with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.Dimension>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.Dimension.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Set Display Type of Dimension
           *
           *
           * @returns } resolving to the Dimension to allow chaining.
           */
          static setDimensionDisplay(
            /**
             * level
             */
            sDisplayType: string
          ): sap.sac.df.model.Dimension;
          /**
           * Add dimension filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Add a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Clear the filter of a dimension
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          clearMemberFilter(): this;
          /**
           * Get effective dimension filters
           *
           *
           * @returns array of member filters
           */
          getMemberFilter(): /* was: sap.sac.df.model.MemberFilter */ any[];
          /**
           * Move dimension one position down on its axis
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          moveDown(): this;
          /**
           * Move dimension one position up on it's axis
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          moveUp(): this;
          /**
           * Open a dialog to display and change the settings of a dimension of the `DataProvider`
           *
           *
           * @returns indicator whether the dialog was confirmed or canceled
           */
          openPropertyDialog(): Promise<boolean>;
          /**
           * Open a dialog to display and change the filter on a dimension
           *
           *
           * @returns resolving to a boolean which is false when the dialog is cancelled and true if is was closed
           * with Ok and dynamic filters of the given dimension are updated
           */
          openValueHelpDialog(): Promise<any>;
          /**
           * Set Display Hierarchy
           *
           *
           * @returns resolving to the `Dimension` to allow chaining.
           */
          readHierarchy(
            /**
             * level
             */
            iLevel: int
          ): sap.sac.df.model.Dimension;
          /**
           * Remove a drill operation on a dimension member
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeDrilldown(): this;
          /**
           * Remove the filter of a dimension
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Remove a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Set Display Hierarchy
           *
           *
           * @returns resolving to the `Dimension` to allow chaining.
           */
          setDisplayHierarchy(
            /**
             * whether the hierarchy should be activated
             */
            bActive: boolean,
            /**
             * the name of the hierarchy (optional)
             */
            sHierarchyName: string,
            /**
             * the version of the hierarchy (optional)
             */
            sVersion: string
          ): sap.sac.df.model.Dimension;
          /**
           * Set dimension filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilter(
            /**
             * array of member filters
             */
            aMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any[]
          ): this;
          /**
           * Set a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Sort the members of a dimension
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          sort(
            /**
             * of sorting
             */
            direction: sap.sac.df.types.SortDirection,
            /**
             * of sorting
             */
            type: sap.sac.df.types.SortType,
            /**
             * in case of a structure the measure according to which is sorted
             */
            sMember: string
          ): this;
          /**
           * Move dimension to the columns axis
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          toColumns(): this;
          /**
           * Move dimension to the rows axis
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          toRows(): this;
        }
        /**
         * Documents manager object
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "ActiveDocumentsDirectory": "",
         * "DocumentsSupportType": ""
         * "IsBasedOnCDSView": ""
         * ```
         *
         *
         * @since 1.119
         * @experimental (since 1.119)
         */
        class Documents extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          ActiveDocumentsDirectory: undefined;

          DocumentsSupportType: undefined;

          IsBasedOnCDSView: undefined;

          /**
           * Creates a new subclass of class sap.sac.df.model.Documents with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.Documents>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.Documents.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Create and retrieve document in the document store
           *
           *
           * @returns a promise which resolves with the newly created document.
           */
          createAndRetrieveDocument(
            /**
             * the document ID
             */
            sDocumentId: undefined,
            /**
             * the content of the document
             */
            sContent: undefined,
            /**
             * properties (ideally as key-value-pair)
             */
            oProperties: undefined
          ): Promise<object>;
          /**
           * Create a document in the document store
           *
           *
           * @returns a promise which resolves to true if create operation is successful, otherwise false.
           */
          createDocument(
            /**
             * the document ID
             */
            sDocumentId: undefined,
            /**
             * the content of the document
             */
            sContent: undefined,
            /**
             * properties (ideally as key-value-pair)
             */
            oProperties: undefined
          ): Promise<boolean>;
          /**
           * Creates a document ID for a data cell in the result set
           *
           *
           * @returns a promise which resolves with the newly created document ID
           */
          createDocumentId(
            /**
             * the row index
             */
            nRowIndex: int,
            /**
             * the column index
             */
            nColumnIndex: int
          ): Promise<String>;
          /**
           * Delete a document in the document store
           *
           *
           * @returns a promise which resolves to true if delete operation is successful, otherwise false.
           */
          deleteDocument(
            /**
             * the document ID
             */
            sDocumentId: undefined
          ): Promise<boolean>;
          /**
           * Delete a document ID for a data cell in the result set
           *
           *
           * @returns a promise which resolves to true if the delete operation is successful, otherwise false.
           */
          deleteDocumentId(
            /**
             * the row index
             */
            nRowIndex: int,
            /**
             * the column index
             */
            nColumnIndex: int
          ): Promise<boolean>;
          /**
           * Get a document ID of a data cell in the result set
           *
           *
           * @returns a promise which resolves with the document ID
           */
          getDocumentId(
            /**
             * the row index
             */
            nRowIndex: int,
            /**
             * the column index
             */
            nColumnIndex: int
          ): Promise<String>;
          /**
           * Get the type of documents support.
           *
           *
           * @returns documents support type
           */
          getDocumentsSupportType(): sap.sac.df.types.DocumentsSupportType;
          /**
           * Retrieves a document from the document store
           *
           *
           * @returns a promise which resolves with the version(s) of the document.
           */
          retrieveDocument(
            /**
             * the document ID
             */
            sDocumentId: undefined,
            /**
             * the version of the document - if version is not supplied, returns all versions.
             */
            sVersion: undefined
          ): Promise<object>;
          /**
           * Retrieve multiple documents from the document store
           *
           *
           * @returns a promise which resolves with all documents and its versions.
           */
          retrieveMultipleDocuments(
            /**
             * the array of document IDs
             */
            aDocumentIds: undefined
          ): Promise<object>;
          /**
           * Is document storage supporting delete access
           *
           *
           * @returns if delete access is supported
           */
          supportsDelete(): boolean;
          /**
           * Is document storage supporting read access
           *
           *
           * @returns if read access is supported
           */
          supportsRead(): boolean;
          /**
           * Is document storage supporting write (create and change) access
           *
           *
           * @returns if write (create and change) access is supported
           */
          supportsWrite(): boolean;
        }
        /**
         * Grid Object
         *
         * @since 1.119
         * @experimental (since 1.119)
         */
        class Grid extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();
          /**
           * Documents
           */
          Documents: sap.sac.df.model.Documents;

          /**
           * Creates a new subclass of class sap.sac.df.model.Grid with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.Grid>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.Grid.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the cell context for a data cell in the result set
           *
           *
           * @returns a promise which resolves with the retrieved cell context
           */
          getCellContext(
            /**
             * the row index
             */
            nRowIndex: int,
            /**
             * the column index
             */
            nColumnIndex: int
          ): Promise<Object>;
          /**
           * Get the list of the jump targets associated to a cell defined via the Report-To-Report Interface.
           *
           *
           * @returns resolving to the List of jump targets.
           */
          getRRITargets(
            /**
             * Row of the data cell
             */
            iRowIndex: int,
            /**
             * Column of the data cell
             */
            iColumnIndex: int
          ): Promise<any>;
        }
        /**
         * The multidimensional model allows to access and change data accessed via the InA Protocol. The multidimensional
         * model populate it's exposed data in JSON format via binding to controls.
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "DataProviders": { },
         * "VariableGroups": { },
         * "Messages": [ ]
         * ```
         *
         *
         * @since 1.119
         * @experimental (since 1.119)
         */
        class MultiDimModel extends sap.ui.model.json.JSONModel {
          /**
           * Constructor for a new MultiDimModel. After model creation you need to wait for the event {@link #event:loaded loaded}.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control.
             */
            mSettings?: object
          );
          /**
           * Configuration
           */
          Configuration: Record<
            string,
            /* was: sap.sac.df.model.Configuration */ any
          >;

          /**
           * Data Providers
           */
          DataProviders: Record<string, sap.sac.df.model.DataProvider>;

          /**
           * Messages
           */
          Messages: sap.ui.core.message.Message[];

          /**
           * Variable Groups
           */
          VariableGroups: Record<string, sap.sac.df.model.VariableGroup>;

          /**
           * Creates a new subclass of class sap.sac.df.model.MultiDimModel with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.json.JSONModel.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.MultiDimModel>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.MultiDimModel.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Creates a new data provider and attaches it to the model.
           *
           *
           * @returns Promise which resolves the created data provider
           */
          addDataProvider(
            /**
             * Data provider name
             */
            sDataProviderName: string,
            /**
             * Datasource name which the data provider is supposed to expose
             */
            sDataSourceName: string,
            /**
             * System name
             */
            sSystem?: string,
            /**
             * Package name
             */
            sPackage?: string,
            /**
             * Schema name
             */
            sSchema?: string,
            /**
             * Data source type
             */
            sDataSourceType?: sap.sac.df.types.DataSourceType,
            /**
             * if the data should be fetched automatically
             */
            bAutoFetchEnabled?: boolean
          ): Promise<sap.sac.df.model.DataProvider>;
          /**
           * Creates a new variable group and attaches it to the model.
           *
           * A variable group defines which variables of the underlying data providers should behave as the same variable.
           * The group is defined by a name and a rule. The first added variable becomes automatically the `MergedVariable`.
           *
           * @deprecated (since 1.124) - Replaced by {@link sap.sac.df.model.MultiDimModel#setVariableGroups setAutoFetchEnabled }
           * API to set the variables.
           *
           * @returns Promise which resolves the created variable group
           */
          addVariableGroup(
            /**
             * Variable group name
             */
            sVariableGroupName: string,
            /**
             * Rule is a function which accept the variable definition and decides if the variable has to be part of
             * te group.
             */
            fnRule: Function,
            /**
             * Additional properties
             */
            oProperties: Object
          ): Promise<sap.sac.df.model.VariableGroup>;
          /**
           * Creates a new variable group and attaches it to the model.
           *
           * A variable group defines which variables of the underlying data providers should behave as the same variable.
           * The group is defined by a name and a rule. The first added variable becomes automatically the `MergedVariable`.
           *
           * @deprecated (since 1.124) - Replaced by {@link sap.sac.df.model.MultiDimModel#setVariableGroups setAutoFetchEnabled }
           * API to set the variables.
           *
           * @returns created variable group
           */
          createVariableGroup(
            /**
             * Variable group name
             */
            sVariableGroupName: string,
            /**
             * Rule is a function which accept the variable definition and decides if the variable has to be part of
             * te group.
             */
            fnRule: Function,
            /**
             * Additional properties
             */
            oProperties: Object
          ): sap.sac.df.model.VariableGroup;
          /**
           * Updates the model from the given the model state including all aggregated data providers
           *
           *
           * @returns Promise with reference to this in order to allow method chaining
           */
          deserialize(
            /**
             * A JSON object which represents the multidimensional model to be applied
             */
            oModelState: object,
            /**
             * Format of the serialization (INA_REPOSITORY_DELTA or INA_REPOSITORY).
             */
            sFormat?: string
          ): Promise<this>;
          /**
           * Fires event {@link #event:dataProviderAdded dataProviderAdded} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireDataProviderAdded(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Fires event {@link #event:dataProviderRemoved dataProviderRemoved} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireDataProviderRemoved(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Fires event {@link #event:dataProviderUpdated dataProviderUpdated} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireDataProviderUpdated(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Fires event {@link #event:variableGroupsAdded variableGroupsAdded} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireVariableGroupsAdded(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Get configuration
           *
           *
           * @returns Configuration object
           */
          getConfiguration(): /* was: sap.sac.df.model.Configuration */ any;
          /**
           * Get a data provider
           *
           *
           * @returns Data provider object if found
           */
          getDataProvider(
            /**
             * Data provider name
             */
            sDataProviderName: string
          ): sap.sac.df.model.DataProvider;
          /**
           * Get all data providers
           *
           *
           * @returns Object of all data providers
           */
          getDataProviders(): Record<string, sap.sac.df.model.DataProvider>;
          /**
           * Get all messages
           *
           *
           * @returns Array of messages
           */
          getMessages(): sap.ui.core.message.Message[];
          /**
           * Get a variable group
           *
           *
           * @returns Variable group object
           */
          getVariableGroup(
            /**
             * Variable group name
             */
            sVariableGroupName: string
          ): sap.sac.df.model.VariableGroup;
          /**
           * Get all variable groups
           *
           *
           * @returns Object of all variable groups
           */
          getVariableGroups(): Record<string, sap.sac.df.model.VariableGroup>;
          /**
           * Ensures all aggregated DataProviders are logged off.
           *
           *
           * @returns Promise which resolves when logoff is finished.
           */
          logoff(): Promise<void>;
          /**
           * Remove existing data provider from the model.
           *
           *
           * @returns Promise which resolves when the removing s finished
           */
          removeDataProvider(
            /**
             * Data provider name to be removed
             */
            sDataProviderName: string
          ): Promise<void>;
          /**
           * Remove a variable group from the model
           *
           * @deprecated (since 1.124) - Replaced by {@link sap.sac.df.model.MultiDimModel#setVariableGroups setAutoFetchEnabled }
           * API to set the variables.
           *
           * @returns Promise which resolves when the removing s finished
           */
          removeVariableGroup(
            /**
             * Variable group name
             */
            sVariableGroupName: string
          ): Promise<void>;
          /**
           * Reset the model to the initial state
           *
           *
           * @returns Promise which resolves when reset is finished.
           */
          resetModel(): Promise<void>;
          /**
           * Serialize the model with all aggregated data providers to a JSON representation
           *
           *
           * @returns A JSON object which represents the multidimensional model
           */
          serialize(
            /**
             * Format of the serialization (INA_REPOSITORY_DELTA or INA_REPOSITORY)
             */
            sFormat?: string
          ): object;
          /**
           * Resets the messages
           */
          setMessages(
            /**
             * The new messages for the model, mapping a binding path to an array of sap.ui.core.message.Message objects
             */
            mMessages: Record<string, sap.ui.core.message.Message[]>
          ): void;
          /**
           * Set variable groups.
           *
           * A variable group defines which variables of the underlying data providers should behave as the same variable.
           * The group is defined by a name and a rule. The first added variable becomes automatically the `MergedVariable`.
           *
           *
           * @returns Promise which resolves the created variable group
           */
          setVariableGroups(
            /**
             * array of variable groups
             */
            aVariableGroups: sap.sac.df.model.VariableGroup[]
          ): Promise<sap.sac.df.model.VariableGroup[]>;
        }
        /**
         * Variable Object
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "Name": "",
         * "Dimension": "",
         * "ValueType": "",
         * "VariableType": "",
         * "Description": "",
         * "Mandatory": "",
         * "SupportsMultipleValues": "",
         * "TechName": "",
         * "InputEnabled": "",
         * "Position": ""
         * "SupportsValueHelp": "",
         * "DataProviderName": "",
         * "MemberFilter": []
         * ```
         *
         *
         * @since 1.119
         * @experimental (since 1.119)
         */
        class Variable extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          /**
           * Creates a new subclass of class sap.sac.df.model.Variable with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.Variable>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.Variable.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Add variable filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Add a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Clear variable filter
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          clearMemberFilter(): this;
          /**
           * Get effective variable filters
           *
           *
           * @returns array of member filters
           */
          getMemberFilter(): /* was: sap.sac.df.model.MemberFilter */ any[];
          /**
           * Open a dialog to display and change the filter on a variable
           *
           *
           * @returns resolving to a boolean which is false when the dialog is cancelled and true if is was closed
           * with Ok and dynamic filters of the given dimension are updated
           */
          openValueHelpDialog(): Promise<any>;
          /**
           * Remove variable filter
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Remove a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Set variable filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilter(
            /**
             * array of member filters
             */
            aMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any[]
          ): this;
          /**
           * Set a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
        }
        /**
         * Variable Group Object
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "Name": "",
         * "MergedVariable": { },
         * "Rule": function () {}
         * ```
         *
         *
         * @since 1.119
         * @experimental (since 1.119)
         */
        class VariableGroup extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();
          /**
           * Merged Variable
           */
          MergedVariable: sap.sac.df.model.Variable;

          /**
           * Name
           */
          Name: string;

          /**
           * Creates a new subclass of class sap.sac.df.model.VariableGroup with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.VariableGroup>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.VariableGroup.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Add variable group filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Add a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Clear variable group filter
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          clearMemberFilter(): this;
          /**
           * Get effective variable group filters
           *
           *
           * @returns array of member filters
           */
          getMemberFilter(): /* was: sap.sac.df.model.MemberFilter */ any[];
          /**
           * Opens the value help dialog so the user choose a value for a variable group After the value is selected
           * only teh VariableGroup.MergedVariable is updated. The variables of the aggregated DataProviders are updated
           * with the next ResultSet fetch
           *
           *
           * @returns to indicate if the VariableGroup has been updated
           */
          openValueHelpDialog(): Promise<boolean>;
          /**
           * Remove variable group filter
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Remove a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Set variable group filters
           *
           *
           * @returns Promise which resolve when the value is set
           */
          setMemberFilter(
            /**
             * array of member filters
             */
            aMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any[]
          ): undefined;
          /**
           * Set a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilterByKey(
            /**
             * (internal) ey of a dimension member
             */
            sKey: string
          ): this;
        }
        /**
         * Visualization Object
         *
         * @since 1.125
         * @experimental (since 1.125)
         */
        class Visualization extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          /**
           * Creates a new subclass of class sap.sac.df.model.Visualization with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.Visualization>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.Visualization.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
        }

        /**
         * Event object of the DataProvider#dataUpdated event.
         */
        type DataProvider$DataUpdatedEvent = sap.ui.base.Event<
          DataProvider$DataUpdatedEventParameters,
          DataProvider
        >;

        /**
         * Event object of the DataProvider#visualizationAdded event.
         */
        type DataProvider$VisualizationAddedEvent = sap.ui.base.Event<
          DataProvider$VisualizationAddedEventParameters,
          DataProvider
        >;

        /**
         * Event object of the DataProvider#visualizationRemoved event.
         */
        type DataProvider$VisualizationRemovedEvent = sap.ui.base.Event<
          DataProvider$VisualizationRemovedEventParameters,
          DataProvider
        >;

        /**
         * Event object of the MultiDimModel#dataLoaded event.
         */
        type MultiDimModel$DataLoadedEvent = sap.ui.base.Event<
          MultiDimModel$DataLoadedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#dataProviderAdded event.
         */
        type MultiDimModel$DataProviderAddedEvent = sap.ui.base.Event<
          MultiDimModel$DataProviderAddedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#dataProviderRemoved event.
         */
        type MultiDimModel$DataProviderRemovedEvent = sap.ui.base.Event<
          MultiDimModel$DataProviderRemovedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#dataProviderUpdated event.
         */
        type MultiDimModel$DataProviderUpdatedEvent = sap.ui.base.Event<
          MultiDimModel$DataProviderUpdatedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#loaded event.
         */
        type MultiDimModel$LoadedEvent = sap.ui.base.Event<
          MultiDimModel$LoadedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#variableGroupsAdded event.
         */
        type MultiDimModel$VariableGroupsAddedEvent = sap.ui.base.Event<
          MultiDimModel$VariableGroupsAddedEventParameters,
          MultiDimModel
        >;
      }

      namespace types {
        /**
         * Type of a data source
         *
         * @experimental (since 1.89)
         */
        enum DataSourceType {
          /**
           * CDS Projection View
           */
          CDSProjectionView = "CDSProjectionView",
          /**
           * Cube
           */
          Cube = "Cube",
          /**
           * Ina Model
           */
          InAModel = "InAModel",
          /**
           * Query
           */
          Query = "Query",
          /**
           * View
           */
          View = "View",
        }
        /**
         * Documents support type
         *
         * @experimental (since 1.120)
         */
        enum DocumentsSupportType {
          /**
           * Documents are not supported.
           */
          None = "NONE",
          /**
           * Read-only documents support.
           */
          Read = "READ",
          /**
           * Read, create, change documents support.
           */
          ReadCreateChange = "READ_CREATE_CHANGE",
          /**
           * Read, create, change, delete documents support.
           */
          ReadWrite = "READ_WRITE",
        }
        /**
         * Sort Direction
         *
         * @experimental (since 1.130)
         */
        enum SortDirection {
          /**
           * Ascending
           */
          Ascending = "ASCENDING",
          /**
           * Descending
           */
          Descending = "DESCENDING",
          /**
           * No sorting
           */
          None = "NONE",
        }
        /**
         * Sort Type
         *
         * @experimental (since 1.130)
         */
        enum SortType {
          /**
           * Sort according to Filter
           */
          Filter = "FILTER",
          /**
           * Sort according to Key
           */
          MemberKey = "MEMBER_KEY",
          /**
           * Sort according to Text
           */
          MemberText = "MEMBER_TEXT",
          /**
           * No sorting
           */
          unset = "unset",
        }
        /**
         * System Type of an InA System
         *
         * @experimental (since 1.89)
         */
        enum SystemType {
          /**
           * The ABAP analytic engine
           */
          ABAP_MDS = "ABAP_MDS",
          /**
           * The BW analytic engine
           */
          BW = "BW",
          /**
           * The Data Warehouce Cloud analytic engine
           */
          DWC = "DWC",
          /**
           * The HANA/MDS analytic engine
           */
          HANA = "HANA",
        }
      }
      /**
       * Describes the settings that can be provided to the DesignerPanel constructor.
       *
       * @experimental (since 1.129)
       */
      interface $DesignerPanelSettings extends sap.ui.core.$ControlSettings {
        /**
         * Defines the relative path to visualization of the corresponding data provider in the multidimensional
         * model.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Show visualization type
         */
        showVisualizationType?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Hide 'Available Objects' pane upon initial load
         */
        hideAvailableObjects?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;
      }

      /**
       * Describes the settings that can be provided to the FilterBar constructor.
       *
       * @experimental (since 1.119)
       */
      interface $FilterBarSettings extends sap.ui.mdc.$FilterBarSettings {
        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the FilterField constructor.
       *
       * @experimental (since 1.121)
       */
      interface $FilterFieldSettings extends sap.ui.mdc.$FilterFieldSettings {
        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the FlexAnalysis constructor.
       *
       * @experimental
       */
      interface $FlexAnalysisSettings extends sap.ui.core.$ControlSettings {
        /**
         * Sets title to be shown in the control. If not set the name of the corresponding back-end query is used
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates Flexible Analysis component should display the component title
         */
        showTitle?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Indicates if Flexible Analysis component automatically requests the ResultSet for the shown data source
         *
         * @deprecated (since 1.124) - the concept has been discarded. Refreshing the data is handled by the data
         * provider.
         */
        autoUpdate?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * URI of the advanced configuration to be fetched
         */
        configurationURI?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * JSON object containing the configuration (alternative to configurationURI)
         */
        configObject?:
          | object
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Configuration Id
         */
        configId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Width of the component
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Height of the component
         */
        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Sets if the Design Panel of FlexAnalysis is hidden
         */
        hideDesignPanel?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Sets if the Style Panel of FlexAnalysis is hidden
         */
        hideStylePanel?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Sets if the menu bar of FlexAnalysis is hidden
         */
        hideMenuBar?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Sets if the status bar of FlexAnalysis is hidden
         */
        hideStatusBar?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Sets if the toolbar of FlexAnalysis is hidden
         */
        hideToolBar?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Sets if the filter of FlexAnalysis is hidden
         */
        hideFilterLine?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Sets if the side navigation bar of FlexAnalysis is hidden
         */
        hideSideNavigation?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Sets if the landing page of FlexAnalysis is hidden
         */
        hideLandingPage?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * System to take data from. If not set or set to "local" current url will be used to determine the system
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         */
        systemName?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Data source (Query name/ View, InA model etc) to be used to get the data from
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         */
        dataSource?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Type the system to connect to get data
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         */
        systemType?:
          | sap.sac.df.types.SystemType
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Interval to keep the InA session alive. values less than 1 deactivates the keep alive handling
         */
        keepAliveInterval?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Client Identifier to be used for underlying InA queries
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         */
        clientIdentifier?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Name of the Data Provider from the corresponding MultiDimModel to be used
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         */
        dataProvider?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Id of the MultiDimModel to use
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         */
        multiDimModelId?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path to the data provider in the multidimensional model.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
         * corresponding MultiDimModel
         */
        implicitVariableHandling?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
         * corresponding MultiDimModel
         */
        styleTemplateName?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Custom panels for the flexible analysis control
         */
        customPanels?:
          | sap.sac.df.FlexAnalysisPanel[]
          | sap.sac.df.FlexAnalysisPanel
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;

        /**
         * Fires on cell click event
         */
        onCellClick?: (oEvent: FlexAnalysis$OnCellClickEvent) => void;
      }

      /**
       * Describes the settings that can be provided to the FlexAnalysisPanel constructor.
       *
       * @experimental
       */
      interface $FlexAnalysisPanelSettings
        extends sap.ui.core.$ElementSettings {
        /**
         * The description of the panel, displayed as tooltip on the side navigation item.
         */
        description?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The title of the panel header.
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The icon of the panel, displayed on the side navigation item and the panel header.
         */
        icon?:
          | sap.ui.core.URI
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The content of this panel
         */
        content?: sap.ui.core.Control;
      }

      /**
       * Describes the settings that can be provided to the Grid constructor.
       *
       * @experimental (since 1.129)
       */
      interface $GridSettings extends sap.ui.core.$ControlSettings {
        /**
         * Show / hide status bar
         */
        showStatusBar?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Show / hide title
         */
        showTitle?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Title
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path to the data provider in the multidimensional model.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Parameters of the FlexAnalysis#onCellClick event.
       */
      interface FlexAnalysis$OnCellClickEventParameters {
        /**
         * Cell context
         */
        cellContext?: object;
      }

      /**
       * DesignerPanel A panel control to design layouts / visualizations
       *
       * @experimental (since 1.129)
       */
      class DesignerPanel extends sap.ui.core.Control {
        /**
         * Constructor for a new `MultiDimDesignerPanel` control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.DesignerPanel with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.DesignerPanel>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.DesignerPanel.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getHideAvailableObjects hideAvailableObjects}.
         *
         * Hide 'Available Objects' pane upon initial load
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `hideAvailableObjects`
         */
        getHideAvailableObjects(): boolean;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to visualization of the corresponding data provider in the multidimensional
         * model.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Gets current value of property {@link #getShowVisualizationType showVisualizationType}.
         *
         * Show visualization type
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `showVisualizationType`
         */
        getShowVisualizationType(): boolean;
        /**
         * Sets a new value for property {@link #getHideAvailableObjects hideAvailableObjects}.
         *
         * Hide 'Available Objects' pane upon initial load
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHideAvailableObjects(
          /**
           * New value for property `hideAvailableObjects`
           */
          bHideAvailableObjects?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to visualization of the corresponding data provider in the multidimensional
         * model.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
        /**
         * Sets a new value for property {@link #getShowVisualizationType showVisualizationType}.
         *
         * Show visualization type
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowVisualizationType(
          /**
           * New value for property `showVisualizationType`
           */
          bShowVisualizationType?: boolean
        ): this;
      }
      /**
       * A Filter Bar based on Multidimensional Model
       *
       * @experimental (since 1.119)
       */
      class FilterBar extends sap.ui.mdc.FilterBar {
        /**
         * Constructor for a new Filter Bar.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.FilterBar with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.mdc.FilterBar.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.FilterBar>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.FilterBar.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
      }
      /**
       * The `FilterField` control is used to filter data based on the conditions. The conditions are managed
       * in the corresponding {@link sap.ui.mdc.condition.ConditionModel ConditionModel}.
       *
       * @since 1.121
       * @experimental (since 1.121)
       */
      class FilterField
        extends sap.ui.mdc.FilterField
        implements
          sap.ui.core.IFormContent,
          sap.ui.core.ISemanticFormContent,
          sap.m.IOverflowToolbarContent
      {
        __implements__sap_ui_core_IFormContent: boolean;
        __implements__sap_ui_core_ISemanticFormContent: boolean;
        __implements__sap_m_IOverflowToolbarContent: boolean;
        /**
         * Constructor for a new `FilterField`.
         */
        constructor(
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.sac.df.$FilterFieldSettings
        );
        /**
         * Constructor for a new `FilterField`.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.sac.df.$FilterFieldSettings
        );

        /**
         * Creates a new subclass of class sap.sac.df.FilterField with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.mdc.FilterField.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.FilterField>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.FilterField.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
      }
      /**
       * A Filter Panel based on Multidimensional Model
       *
       * @experimental (since 1.128)
       */
      class FilterPanel
        extends /* was: sap.ui.mdc.p13n.panels.FilterPanel */ Object
      {
        /**
         * Constructor for a new Filter Panel.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.FilterPanel with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.mdc.p13n.panels.FilterPanel.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.FilterPanel>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.FilterPanel.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getEnableReorder enableReorder}.
         *
         * Determines whether the reordering of personalization items is enabled.
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `enableReorder`
         */
        getEnableReorder(): boolean;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Sets a new value for property {@link #getEnableReorder enableReorder}.
         *
         * Determines whether the reordering of personalization items is enabled.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setEnableReorder(
          /**
           * New value for property `enableReorder`
           */
          bEnableReorder?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
      }
      /**
       * Enables users to view, navigate and change multidimensional data exposed via InA.
       *
       * Overview:
       *
       * The user can view the data in a Table, navigate in the data via a context menu or builder panels The
       * data source that the FlexAnalysis consumes or renders has to be provided as a property value.
       *
       * @experimental
       */
      class FlexAnalysis extends sap.ui.core.Control {
        /**
         * Constructor for a new `FlexAnalysis`.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string
        );

        /**
         * Creates a new subclass of class sap.sac.df.FlexAnalysis with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.FlexAnalysis>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.FlexAnalysis.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Adds some customPanel to the aggregation {@link #getCustomPanels customPanels}.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        addCustomPanel(
          /**
           * The customPanel to add; if empty, nothing is inserted
           */
          oCustomPanel: sap.sac.df.FlexAnalysisPanel
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:onCellClick onCellClick} event of this `sap.sac.df.FlexAnalysis`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.sac.df.FlexAnalysis` itself.
         *
         * Fires on cell click event
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        attachOnCellClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: FlexAnalysis$OnCellClickEvent) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.sac.df.FlexAnalysis` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:onCellClick onCellClick} event of this `sap.sac.df.FlexAnalysis`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.sac.df.FlexAnalysis` itself.
         *
         * Fires on cell click event
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        attachOnCellClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: FlexAnalysis$OnCellClickEvent) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.sac.df.FlexAnalysis` itself
           */
          oListener?: object
        ): this;
        /**
         * Binds property {@link #getDataProvider dataProvider} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        bindDataProvider(
          /**
           * The binding information
           */
          oBindingInfo: sap.ui.base.ManagedObject.PropertyBindingInfo
        ): this;
        /**
         * Destroys all the customPanels in the aggregation {@link #getCustomPanels customPanels}.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        destroyCustomPanels(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:onCellClick onCellClick} event of this `sap.sac.df.FlexAnalysis`.
         *
         * The passed function and listener object must match the ones used for event registration.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        detachOnCellClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: FlexAnalysis$OnCellClickEvent) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Fires event {@link #event:onCellClick onCellClick} to attached listeners.
         *
         * @ui5-protected Do not call from applications (only from related classes in the framework)
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        fireOnCellClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: sap.sac.df.FlexAnalysis$OnCellClickEventParameters
        ): this;
        /**
         * Gets current value of property {@link #getAutoUpdate autoUpdate}.
         *
         * Indicates if Flexible Analysis component automatically requests the ResultSet for the shown data source
         *
         * Default value is `true`.
         *
         * @deprecated (since 1.124) - the concept has been discarded. Refreshing the data is handled by the data
         * provider.
         *
         * @returns Value of property `autoUpdate`
         */
        getAutoUpdate(): boolean;
        /**
         * Gets current value of property {@link #getClientIdentifier clientIdentifier}.
         *
         * Client Identifier to be used for underlying InA queries
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Value of property `clientIdentifier`
         */
        getClientIdentifier(): string;
        /**
         * Gets current value of property {@link #getConfigId configId}.
         *
         * Configuration Id
         *
         *
         * @returns Value of property `configId`
         */
        getConfigId(): string;
        /**
         * Gets current value of property {@link #getConfigObject configObject}.
         *
         * JSON object containing the configuration (alternative to configurationURI)
         *
         *
         * @returns Value of property `configObject`
         */
        getConfigObject(): object;
        /**
         * Gets current value of property {@link #getConfigurationURI configurationURI}.
         *
         * URI of the advanced configuration to be fetched
         *
         *
         * @returns Value of property `configurationURI`
         */
        getConfigurationURI(): string;
        /**
         * Gets content of aggregation {@link #getCustomPanels customPanels}.
         *
         * Custom panels for the flexible analysis control
         */
        getCustomPanels(): sap.sac.df.FlexAnalysisPanel[];
        /**
         * Gets current value of property {@link #getDataProvider dataProvider}.
         *
         * Name of the Data Provider from the corresponding MultiDimModel to be used
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Value of property `dataProvider`
         */
        getDataProvider(): any;
        /**
         * Gets current value of property {@link #getDataSource dataSource}.
         *
         * Data source (Query name/ View, InA model etc) to be used to get the data from
         *
         * Default value is `"$datasource"`.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Value of property `dataSource`
         */
        getDataSource(): string;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Height of the component
         *
         * Default value is `"100%"`.
         *
         *
         * @returns Value of property `height`
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getHideDesignPanel hideDesignPanel}.
         *
         * Sets if the Design Panel of FlexAnalysis is hidden
         *
         * Default value is `true`.
         *
         *
         * @returns Value of property `hideDesignPanel`
         */
        getHideDesignPanel(): boolean;
        /**
         * Gets current value of property {@link #getHideFilterLine hideFilterLine}.
         *
         * Sets if the filter of FlexAnalysis is hidden
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `hideFilterLine`
         */
        getHideFilterLine(): boolean;
        /**
         * Gets current value of property {@link #getHideLandingPage hideLandingPage}.
         *
         * Sets if the landing page of FlexAnalysis is hidden
         *
         * Default value is `true`.
         *
         *
         * @returns Value of property `hideLandingPage`
         */
        getHideLandingPage(): boolean;
        /**
         * Gets current value of property {@link #getHideMenuBar hideMenuBar}.
         *
         * Sets if the menu bar of FlexAnalysis is hidden
         *
         * Default value is `true`.
         *
         *
         * @returns Value of property `hideMenuBar`
         */
        getHideMenuBar(): boolean;
        /**
         * Gets current value of property {@link #getHideSideNavigation hideSideNavigation}.
         *
         * Sets if the side navigation bar of FlexAnalysis is hidden
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `hideSideNavigation`
         */
        getHideSideNavigation(): boolean;
        /**
         * Gets current value of property {@link #getHideStatusBar hideStatusBar}.
         *
         * Sets if the status bar of FlexAnalysis is hidden
         *
         * Default value is `true`.
         *
         *
         * @returns Value of property `hideStatusBar`
         */
        getHideStatusBar(): boolean;
        /**
         * Gets current value of property {@link #getHideStylePanel hideStylePanel}.
         *
         * Sets if the Style Panel of FlexAnalysis is hidden
         *
         * Default value is `true`.
         *
         *
         * @returns Value of property `hideStylePanel`
         */
        getHideStylePanel(): boolean;
        /**
         * Gets current value of property {@link #getHideToolBar hideToolBar}.
         *
         * Sets if the toolbar of FlexAnalysis is hidden
         *
         * Default value is `true`.
         *
         *
         * @returns Value of property `hideToolBar`
         */
        getHideToolBar(): boolean;
        /**
         * Gets current value of property {@link #getImplicitVariableHandling implicitVariableHandling}.
         *
         * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
         * corresponding MultiDimModel
         *
         * Default value is `true`.
         *
         *
         * @returns Value of property `implicitVariableHandling`
         */
        getImplicitVariableHandling(): boolean;
        /**
         * Gets current value of property {@link #getKeepAliveInterval keepAliveInterval}.
         *
         * Interval to keep the InA session alive. values less than 1 deactivates the keep alive handling
         *
         * Default value is `0`.
         *
         *
         * @returns Value of property `keepAliveInterval`
         */
        getKeepAliveInterval(): int;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Gets current value of property {@link #getMultiDimModelId multiDimModelId}.
         *
         * Id of the MultiDimModel to use
         *
         * Default value is `"om"`.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Value of property `multiDimModelId`
         */
        getMultiDimModelId(): string;
        /**
         * Gets current value of property {@link #getShowTitle showTitle}.
         *
         * Indicates Flexible Analysis component should display the component title
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `showTitle`
         */
        getShowTitle(): boolean;
        /**
         * Gets current value of property {@link #getStyleTemplateName styleTemplateName}.
         *
         * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
         * corresponding MultiDimModel
         *
         *
         * @returns Value of property `styleTemplateName`
         */
        getStyleTemplateName(): string;
        /**
         * Gets current value of property {@link #getSystemName systemName}.
         *
         * System to take data from. If not set or set to "local" current url will be used to determine the system
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Value of property `systemName`
         */
        getSystemName(): string;
        /**
         * Gets current value of property {@link #getSystemType systemType}.
         *
         * Type the system to connect to get data
         *
         * Default value is `BW`.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Value of property `systemType`
         */
        getSystemType(): sap.sac.df.types.SystemType;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Sets title to be shown in the control. If not set the name of the corresponding back-end query is used
         *
         *
         * @returns Value of property `title`
         */
        getTitle(): string;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Width of the component
         *
         * Default value is `"100%"`.
         *
         *
         * @returns Value of property `width`
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.sac.df.FlexAnalysisPanel` in the aggregation {@link #getCustomPanels customPanels}.
         * and returns its index if found or -1 otherwise.
         *
         *
         * @returns The index of the provided control in the aggregation if found, or -1 otherwise
         */
        indexOfCustomPanel(
          /**
           * The customPanel whose index is looked for
           */
          oCustomPanel: sap.sac.df.FlexAnalysisPanel
        ): int;
        /**
         * Inserts a customPanel into the aggregation {@link #getCustomPanels customPanels}.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        insertCustomPanel(
          /**
           * The customPanel to insert; if empty, nothing is inserted
           */
          oCustomPanel: sap.sac.df.FlexAnalysisPanel,
          /**
           * The `0`-based index the customPanel should be inserted at; for a negative value of `iIndex`, the customPanel
           * is inserted at position 0; for a value greater than the current size of the aggregation, the customPanel
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getCustomPanels customPanels}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         *
         *
         * @returns An array of the removed elements (might be empty)
         */
        removeAllCustomPanels(): sap.sac.df.FlexAnalysisPanel[];
        /**
         * Removes a customPanel from the aggregation {@link #getCustomPanels customPanels}.
         *
         *
         * @returns The removed customPanel or `null`
         */
        removeCustomPanel(
          /**
           * The customPanel to remove or its index or id
           */
          vCustomPanel: int | string | sap.sac.df.FlexAnalysisPanel
        ): sap.sac.df.FlexAnalysisPanel | null;
        /**
         * Sets a new value for property {@link #getAutoUpdate autoUpdate}.
         *
         * Indicates if Flexible Analysis component automatically requests the ResultSet for the shown data source
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         *
         * @deprecated (since 1.124) - the concept has been discarded. Refreshing the data is handled by the data
         * provider.
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setAutoUpdate(
          /**
           * New value for property `autoUpdate`
           */
          bAutoUpdate?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getClientIdentifier clientIdentifier}.
         *
         * Client Identifier to be used for underlying InA queries
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setClientIdentifier(
          /**
           * New value for property `clientIdentifier`
           */
          sClientIdentifier: string
        ): this;
        /**
         * Sets a new value for property {@link #getConfigId configId}.
         *
         * Configuration Id
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setConfigId(
          /**
           * New value for property `configId`
           */
          sConfigId: string
        ): this;
        /**
         * Sets a new value for property {@link #getConfigObject configObject}.
         *
         * JSON object containing the configuration (alternative to configurationURI)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setConfigObject(
          /**
           * New value for property `configObject`
           */
          oConfigObject: object
        ): this;
        /**
         * Sets a new value for property {@link #getConfigurationURI configurationURI}.
         *
         * URI of the advanced configuration to be fetched
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setConfigurationURI(
          /**
           * New value for property `configurationURI`
           */
          sConfigurationURI: string
        ): this;
        /**
         * Sets a new value for property {@link #getDataProvider dataProvider}.
         *
         * Name of the Data Provider from the corresponding MultiDimModel to be used
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setDataProvider(
          /**
           * New value for property `dataProvider`
           */
          oDataProvider: any
        ): this;
        /**
         * Sets a new value for property {@link #getDataSource dataSource}.
         *
         * Data source (Query name/ View, InA model etc) to be used to get the data from
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"$datasource"`.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setDataSource(
          /**
           * New value for property `dataSource`
           */
          sDataSource?: string
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Height of the component
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"100%"`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getHideDesignPanel hideDesignPanel}.
         *
         * Sets if the Design Panel of FlexAnalysis is hidden
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHideDesignPanel(
          /**
           * New value for property `hideDesignPanel`
           */
          bHideDesignPanel?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHideFilterLine hideFilterLine}.
         *
         * Sets if the filter of FlexAnalysis is hidden
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHideFilterLine(
          /**
           * New value for property `hideFilterLine`
           */
          bHideFilterLine?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHideLandingPage hideLandingPage}.
         *
         * Sets if the landing page of FlexAnalysis is hidden
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHideLandingPage(
          /**
           * New value for property `hideLandingPage`
           */
          bHideLandingPage?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHideMenuBar hideMenuBar}.
         *
         * Sets if the menu bar of FlexAnalysis is hidden
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHideMenuBar(
          /**
           * New value for property `hideMenuBar`
           */
          bHideMenuBar?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHideSideNavigation hideSideNavigation}.
         *
         * Sets if the side navigation bar of FlexAnalysis is hidden
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHideSideNavigation(
          /**
           * New value for property `hideSideNavigation`
           */
          bHideSideNavigation?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHideStatusBar hideStatusBar}.
         *
         * Sets if the status bar of FlexAnalysis is hidden
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHideStatusBar(
          /**
           * New value for property `hideStatusBar`
           */
          bHideStatusBar?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHideStylePanel hideStylePanel}.
         *
         * Sets if the Style Panel of FlexAnalysis is hidden
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHideStylePanel(
          /**
           * New value for property `hideStylePanel`
           */
          bHideStylePanel?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHideToolBar hideToolBar}.
         *
         * Sets if the toolbar of FlexAnalysis is hidden
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setHideToolBar(
          /**
           * New value for property `hideToolBar`
           */
          bHideToolBar?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getImplicitVariableHandling implicitVariableHandling}.
         *
         * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
         * corresponding MultiDimModel
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setImplicitVariableHandling(
          /**
           * New value for property `implicitVariableHandling`
           */
          bImplicitVariableHandling?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getKeepAliveInterval keepAliveInterval}.
         *
         * Interval to keep the InA session alive. values less than 1 deactivates the keep alive handling
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setKeepAliveInterval(
          /**
           * New value for property `keepAliveInterval`
           */
          iKeepAliveInterval?: int
        ): this;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
        /**
         * Sets a new value for property {@link #getMultiDimModelId multiDimModelId}.
         *
         * Id of the MultiDimModel to use
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"om"`.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMultiDimModelId(
          /**
           * New value for property `multiDimModelId`
           */
          sMultiDimModelId?: string
        ): this;
        /**
         * Sets a new value for property {@link #getShowTitle showTitle}.
         *
         * Indicates Flexible Analysis component should display the component title
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowTitle(
          /**
           * New value for property `showTitle`
           */
          bShowTitle?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getStyleTemplateName styleTemplateName}.
         *
         * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
         * corresponding MultiDimModel
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setStyleTemplateName(
          /**
           * New value for property `styleTemplateName`
           */
          sStyleTemplateName: string
        ): this;
        /**
         * Sets a new value for property {@link #getSystemName systemName}.
         *
         * System to take data from. If not set or set to "local" current url will be used to determine the system
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setSystemName(
          /**
           * New value for property `systemName`
           */
          sSystemName: string
        ): this;
        /**
         * Sets a new value for property {@link #getSystemType systemType}.
         *
         * Type the system to connect to get data
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `BW`.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setSystemType(
          /**
           * New value for property `systemType`
           */
          sSystemType?: sap.sac.df.types.SystemType
        ): this;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Sets title to be shown in the control. If not set the name of the corresponding back-end query is used
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Width of the component
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"100%"`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
        /**
         * Unbinds property {@link #getDataProvider dataProvider} from model data.
         *
         * @deprecated (since 1.124) - Replaced by metaPath property and the corresponding data provider definition.
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        unbindDataProvider(): this;
      }
      /**
       * A panel to be added into FlexAnalysis control
       *
       * @experimental
       */
      class FlexAnalysisPanel extends sap.ui.core.Element {
        /**
         * Constructor for a new Flexible Analysis Panel.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.sac.df.$FlexAnalysisPanelSettings
        );
        /**
         * Constructor for a new Flexible Analysis Panel.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.sac.df.$FlexAnalysisPanelSettings
        );

        /**
         * Creates a new subclass of class sap.sac.df.FlexAnalysisPanel with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.FlexAnalysisPanel>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.FlexAnalysisPanel.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Destroys the content in the aggregation {@link #getContent content}.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        destroyContent(): this;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * The content of this panel
         */
        getContent(): sap.ui.core.Control;
        /**
         * Gets current value of property {@link #getDescription description}.
         *
         * The description of the panel, displayed as tooltip on the side navigation item.
         *
         *
         * @returns Value of property `description`
         */
        getDescription(): string;
        /**
         * Gets current value of property {@link #getIcon icon}.
         *
         * The icon of the panel, displayed on the side navigation item and the panel header.
         *
         *
         * @returns Value of property `icon`
         */
        getIcon(): sap.ui.core.URI;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * The title of the panel header.
         *
         *
         * @returns Value of property `title`
         */
        getTitle(): string;
        /**
         * Sets the aggregated {@link #getContent content}.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setContent(
          /**
           * The content to set
           */
          oContent: sap.ui.core.Control
        ): this;
        /**
         * Sets a new value for property {@link #getDescription description}.
         *
         * The description of the panel, displayed as tooltip on the side navigation item.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setDescription(
          /**
           * New value for property `description`
           */
          sDescription: string
        ): this;
        /**
         * Sets a new value for property {@link #getIcon icon}.
         *
         * The icon of the panel, displayed on the side navigation item and the panel header.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setIcon(
          /**
           * New value for property `icon`
           */
          sIcon: sap.ui.core.URI
        ): this;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * The title of the panel header.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): this;
      }
      /**
       * Grid A grid control for displaying multi-dimensional data
       *
       * @experimental (since 1.129)
       */
      class Grid extends sap.ui.core.Control {
        /**
         * Constructor for a new `Grid` control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.Grid with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.Grid>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.Grid.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Gets current value of property {@link #getShowStatusBar showStatusBar}.
         *
         * Show / hide status bar
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `showStatusBar`
         */
        getShowStatusBar(): boolean;
        /**
         * Gets current value of property {@link #getShowTitle showTitle}.
         *
         * Show / hide title
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `showTitle`
         */
        getShowTitle(): boolean;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title
         *
         *
         * @returns Value of property `title`
         */
        getTitle(): string;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
        /**
         * Sets a new value for property {@link #getShowStatusBar showStatusBar}.
         *
         * Show / hide status bar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowStatusBar(
          /**
           * New value for property `showStatusBar`
           */
          bShowStatusBar?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowTitle showTitle}.
         *
         * Show / hide title
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowTitle(
          /**
           * New value for property `showTitle`
           */
          bShowTitle?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Title
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): this;
      }

      /**
       * Event object of the FlexAnalysis#onCellClick event.
       */
      type FlexAnalysis$OnCellClickEvent = sap.ui.base.Event<
        FlexAnalysis$OnCellClickEventParameters,
        FlexAnalysis
      >;
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/sac/df/changeHandler/MultiDimModelChangeHandler": undefined;

    "sap/sac/df/DesignerPanel": undefined;

    "sap/sac/df/FilterBar": undefined;

    "sap/sac/df/FilterField": undefined;

    "sap/sac/df/FilterPanel": undefined;

    "sap/sac/df/FlexAnalysis": undefined;

    "sap/sac/df/FlexAnalysisPanel": undefined;

    "sap/sac/df/Grid": undefined;

    "sap/sac/df/library": undefined;

    "sap/sac/df/model/AxesLayout": undefined;

    "sap/sac/df/model/DataProvider": undefined;

    "sap/sac/df/model/DataSourceInfo": undefined;

    "sap/sac/df/model/Dimension": undefined;

    "sap/sac/df/model/Documents": undefined;

    "sap/sac/df/model/Grid": undefined;

    "sap/sac/df/model/MultiDimModel": undefined;

    "sap/sac/df/model/Variable": undefined;

    "sap/sac/df/model/VariableGroup": undefined;

    "sap/sac/df/model/Visualization": undefined;

    "sap/sac/df/types/DataSourceType": undefined;

    "sap/sac/df/types/DocumentsSupportType": undefined;

    "sap/sac/df/types/SortDirection": undefined;

    "sap/sac/df/types/SortType": undefined;

    "sap/sac/df/types/SystemType": undefined;
  }
}
